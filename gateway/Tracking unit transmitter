#include <WiFi.h>
#include <esp_now.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 4
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
typedef struct struct_message {
  uint64_t chipID;
  float temperature;
} struct_message;

struct_message myData;
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
esp_now_peer_info_t peerInfo;
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Delivery: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  Serial.println("ESP32 Transmitter Started...");
  myData.chipID = ESP.getEfuseMac();
  sensors.begin();
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    ESP.restart();
  }
  esp_now_register_send_cb(OnDataSent);
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop() {
  sensors.requestTemperatures();
  myData.temperature = sensors.getTempCByIndex(0);
  esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
  Serial.print("Sent -> ID: ");
  Serial.print(myData.chipID, HEX);
  Serial.print(" | Temp: ");
  Serial.print(myData.temperature);
  Serial.println(" Â°C");
  delay(2000);  // every 2 seconds
}
